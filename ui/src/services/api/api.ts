/* eslint-disable */
/**
 * RAG Studio API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface CloudConfiguration
 */
export interface CloudConfiguration {
    /**
     * Cloud configuration ID
     * @type {string}
     * @memberof CloudConfiguration
     */
    'id': string;
    /**
     * Cloud configuration name
     * @type {string}
     * @memberof CloudConfiguration
     */
    'name': string;
    /**
     * 
     * @type {CloudConfigurationConfiguration}
     * @memberof CloudConfiguration
     */
    'configuration': CloudConfigurationConfiguration;
}
/**
 * 
 * @export
 * @interface CloudConfigurationAws
 */
export interface CloudConfigurationAws {
    /**
     * 
     * @type {CloudConfigurationAwsAws}
     * @memberof CloudConfigurationAws
     */
    'aws': CloudConfigurationAwsAws;
}
/**
 * 
 * @export
 * @interface CloudConfigurationAwsAws
 */
export interface CloudConfigurationAwsAws {
    /**
     * 
     * @type {string}
     * @memberof CloudConfigurationAwsAws
     */
    'region': string;
    /**
     * 
     * @type {CloudConfigurationAwsAwsType}
     * @memberof CloudConfigurationAwsAws
     */
    'type': CloudConfigurationAwsAwsType;
}
/**
 * @type CloudConfigurationAwsAwsType
 * @export
 */
export type CloudConfigurationAwsAwsType = CloudConfigurationAwsInstanceProfile | CloudConfigurationAwsKey;

/**
 * 
 * @export
 * @enum {string}
 */

export const CloudConfigurationAwsInstanceProfile = {
    InstanceProfile: 'instance_profile'
} as const;

export type CloudConfigurationAwsInstanceProfile = typeof CloudConfigurationAwsInstanceProfile[keyof typeof CloudConfigurationAwsInstanceProfile];


/**
 * 
 * @export
 * @interface CloudConfigurationAwsKey
 */
export interface CloudConfigurationAwsKey {
    /**
     * 
     * @type {string}
     * @memberof CloudConfigurationAwsKey
     */
    'access_key_id': string;
    /**
     * 
     * @type {string}
     * @memberof CloudConfigurationAwsKey
     */
    'secret_access_key': string;
}
/**
 * @type CloudConfigurationConfiguration
 * @export
 */
export type CloudConfigurationConfiguration = CloudConfigurationAws;

/**
 * 
 * @export
 * @interface CloudConfigurationCreateRequest
 */
export interface CloudConfigurationCreateRequest {
    /**
     * Cloud configuration name
     * @type {string}
     * @memberof CloudConfigurationCreateRequest
     */
    'name': string;
    /**
     * 
     * @type {CloudConfigurationConfiguration}
     * @memberof CloudConfigurationCreateRequest
     */
    'configuration': CloudConfigurationConfiguration;
}
/**
 * 
 * @export
 * @interface CloudConfigurationList
 */
export interface CloudConfigurationList {
    /**
     * 
     * @type {Array<CloudConfiguration>}
     * @memberof CloudConfigurationList
     */
    'items': Array<CloudConfiguration>;
}
/**
 * 
 * @export
 * @interface CloudConfigurationUpdateRequest
 */
export interface CloudConfigurationUpdateRequest {
    /**
     * Cloud configuration name
     * @type {string}
     * @memberof CloudConfigurationUpdateRequest
     */
    'name': string;
    /**
     * 
     * @type {CloudConfigurationConfiguration}
     * @memberof CloudConfigurationUpdateRequest
     */
    'configuration': CloudConfigurationConfiguration;
}

/**
 * ConfigCloudApi - axios parameter creator
 * @export
 */
export const ConfigCloudApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a cloud configuration
         * @param {CloudConfigurationCreateRequest} cloudConfigurationCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCloudConfiguration: async (cloudConfigurationCreateRequest: CloudConfigurationCreateRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cloudConfigurationCreateRequest' is not null or undefined
            assertParamExists('createCloudConfiguration', 'cloudConfigurationCreateRequest', cloudConfigurationCreateRequest)
            const localVarPath = `/configurations/cloud`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(cloudConfigurationCreateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a cloud configuration
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCloudConfiguration: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteCloudConfiguration', 'id', id)
            const localVarPath = `/configurations/cloud/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a cloud configuration
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCloudConfiguration: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getCloudConfiguration', 'id', id)
            const localVarPath = `/configurations/cloud/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List cloud configurations
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCloudConfigurations: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/configurations/cloud`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a cloud configuration
         * @param {string} id 
         * @param {CloudConfigurationUpdateRequest} cloudConfigurationUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCloudConfiguration: async (id: string, cloudConfigurationUpdateRequest: CloudConfigurationUpdateRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateCloudConfiguration', 'id', id)
            // verify required parameter 'cloudConfigurationUpdateRequest' is not null or undefined
            assertParamExists('updateCloudConfiguration', 'cloudConfigurationUpdateRequest', cloudConfigurationUpdateRequest)
            const localVarPath = `/configurations/cloud/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(cloudConfigurationUpdateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ConfigCloudApi - functional programming interface
 * @export
 */
export const ConfigCloudApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ConfigCloudApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create a cloud configuration
         * @param {CloudConfigurationCreateRequest} cloudConfigurationCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createCloudConfiguration(cloudConfigurationCreateRequest: CloudConfigurationCreateRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CloudConfiguration>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createCloudConfiguration(cloudConfigurationCreateRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ConfigCloudApi.createCloudConfiguration']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete a cloud configuration
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteCloudConfiguration(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteCloudConfiguration(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ConfigCloudApi.deleteCloudConfiguration']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get a cloud configuration
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCloudConfiguration(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CloudConfiguration>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCloudConfiguration(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ConfigCloudApi.getCloudConfiguration']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary List cloud configurations
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listCloudConfigurations(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CloudConfigurationList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listCloudConfigurations(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ConfigCloudApi.listCloudConfigurations']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update a cloud configuration
         * @param {string} id 
         * @param {CloudConfigurationUpdateRequest} cloudConfigurationUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateCloudConfiguration(id: string, cloudConfigurationUpdateRequest: CloudConfigurationUpdateRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CloudConfiguration>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateCloudConfiguration(id, cloudConfigurationUpdateRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ConfigCloudApi.updateCloudConfiguration']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ConfigCloudApi - factory interface
 * @export
 */
export const ConfigCloudApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ConfigCloudApiFp(configuration)
    return {
        /**
         * 
         * @summary Create a cloud configuration
         * @param {CloudConfigurationCreateRequest} cloudConfigurationCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCloudConfiguration(cloudConfigurationCreateRequest: CloudConfigurationCreateRequest, options?: RawAxiosRequestConfig): AxiosPromise<CloudConfiguration> {
            return localVarFp.createCloudConfiguration(cloudConfigurationCreateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a cloud configuration
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCloudConfiguration(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteCloudConfiguration(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a cloud configuration
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCloudConfiguration(id: string, options?: RawAxiosRequestConfig): AxiosPromise<CloudConfiguration> {
            return localVarFp.getCloudConfiguration(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List cloud configurations
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCloudConfigurations(options?: RawAxiosRequestConfig): AxiosPromise<CloudConfigurationList> {
            return localVarFp.listCloudConfigurations(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update a cloud configuration
         * @param {string} id 
         * @param {CloudConfigurationUpdateRequest} cloudConfigurationUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCloudConfiguration(id: string, cloudConfigurationUpdateRequest: CloudConfigurationUpdateRequest, options?: RawAxiosRequestConfig): AxiosPromise<CloudConfiguration> {
            return localVarFp.updateCloudConfiguration(id, cloudConfigurationUpdateRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ConfigCloudApi - object-oriented interface
 * @export
 * @class ConfigCloudApi
 * @extends {BaseAPI}
 */
export class ConfigCloudApi extends BaseAPI {
    /**
     * 
     * @summary Create a cloud configuration
     * @param {CloudConfigurationCreateRequest} cloudConfigurationCreateRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConfigCloudApi
     */
    public createCloudConfiguration(cloudConfigurationCreateRequest: CloudConfigurationCreateRequest, options?: RawAxiosRequestConfig) {
        return ConfigCloudApiFp(this.configuration).createCloudConfiguration(cloudConfigurationCreateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a cloud configuration
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConfigCloudApi
     */
    public deleteCloudConfiguration(id: string, options?: RawAxiosRequestConfig) {
        return ConfigCloudApiFp(this.configuration).deleteCloudConfiguration(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get a cloud configuration
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConfigCloudApi
     */
    public getCloudConfiguration(id: string, options?: RawAxiosRequestConfig) {
        return ConfigCloudApiFp(this.configuration).getCloudConfiguration(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List cloud configurations
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConfigCloudApi
     */
    public listCloudConfigurations(options?: RawAxiosRequestConfig) {
        return ConfigCloudApiFp(this.configuration).listCloudConfigurations(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update a cloud configuration
     * @param {string} id 
     * @param {CloudConfigurationUpdateRequest} cloudConfigurationUpdateRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConfigCloudApi
     */
    public updateCloudConfiguration(id: string, cloudConfigurationUpdateRequest: CloudConfigurationUpdateRequest, options?: RawAxiosRequestConfig) {
        return ConfigCloudApiFp(this.configuration).updateCloudConfiguration(id, cloudConfigurationUpdateRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



